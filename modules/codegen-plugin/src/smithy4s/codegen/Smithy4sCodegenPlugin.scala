/*
 *  Copyright 2021-2022 Disney Streaming
 *
 *  Licensed under the Tomorrow Open Source Technology License, Version 1.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     https://disneystreaming.github.io/TOST-1.0.txt
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package smithy4s.codegen

import sbt.Keys._
import sbt.util.CacheImplicits._
import sbt.{fileJsonFormatter => _, _}
import JsonConverters._

object Smithy4sCodegenPlugin extends AutoPlugin {
  override def requires = plugins.JvmPlugin

  object autoImport {
    val smithy4sCodegen =
      taskKey[Seq[File]](
        "Generate .scala and other files from smithy specs (.smithy or .json files)"
      )

    val smithy4sVersion =
      settingKey[String]("Smithy4sVersion")

    val smithy4sInputDirs = settingKey[Seq[File]](
      "Input directories for smithy specs (.smithy or .json files)"
    )

    val smithy4sOutputDir =
      settingKey[File](
        "Output directory for .scala files generated by smithy4s"
      )

    val smithy4sResourceDir =
      settingKey[File](
        "Output directory for non-Scala files generated by smithy4s"
      )

    val smithy4sAllowedNamespaces =
      settingKey[List[String]](
        "Allow-list of namespaces that should be processed by the generator. If unset, considers all namespaces but stdlib ones"
      )

    val smithy4sExcludedNamespaces =
      settingKey[List[String]](
        "Disallow-list of namespaces that should not be processed by the generator. When set, namespaces are evicted as the last filtering step"
      )

    val smithy4sSmithyLibrary =
      settingKey[Boolean](
        "Sets whether this project should be used as a Smithy library by packaging the Smithy specs in the resulting jar"
      )

    val smithy4sExplicitCodegenOnlyDependencies =
      taskKey[Seq[ModuleID]](
        List(
          "List of explicitly defined libraries for external dependencies that should be added to the classpath used by Smithy4s during code-generation",
          "The smithy files and smithy validators contained by these jars are included in the Smithy4s code-generation process",
          "Namespaces that were used for code generation in these dependencies will be excluded from code generation in this project.",
          "By default, this includes the library dependencies of annotated with the `Smithy4s` configuration of the current project and its upstreams"
        ).mkString(" ")
      )

    val smithy4sExternallyTrackedDependencies =
      taskKey[Seq[ModuleID]](
        List(
          "List of libraries that external dependencies indicate having used during their own code-generation process",
          "If a project using Smithy4s depends on a library that contains Smithy4s generated code, local Smithy files might need the jars",
          "that were used by Smithy4s when the library in question was built. By default, Smithy4s adds a line in the jar manifests of the",
          "projects it is enabled on, to inform downstream projects of the jars they might want to pull during their own code-generation.",
          "This is different from a transitive compile dependency, as the jars used during code-generation might not necessarily end up",
          "on the compile class-path of a project"
        ).mkString(" ")
      )

    val smithy4sNormalExternalDependencies =
      taskKey[Seq[ModuleID]](
        List(
          "List of libraries that are declared normally and that will be added to the classpath of the code-generation process",
          "By default, this includes all `libraryDependencies` matching the scope, both local and transitive"
        ).mkString(" ")
      )

    val smithy4sAllExternalDependencies =
      taskKey[Seq[ModuleID]](
        List(
          "Exhaustive list external dependencies that should be added to the classpath used by Smithy4s during code-generation",
          "The smithy files and smithy validators contained by these jars are included in the Smithy4s code-generation process",
          "Namespaces that were used for code generation in these dependencies will be excluded from code generation in this project."
        ).mkString(" ")
      )

    val smithy4sInternalDependenciesAsJars =
      taskKey[Seq[File]](
        List(
          "List of jars of internal dependencies that should be added to the classpath used by Smithy4s during code-generation",
          "The smithy files and smithy validators contained by these jars are included in the Smithy4s code-generation process",
          "Namespaces that were used for code generation in these dependencies will be excluded from code generation in this project.",
          "By default, this includes the jars produced by packaging this project's local dependencies, which implies these should compile for the codegen task to run",
          "This can be set to an empty list to prevent the inclusion of local dependencies during the code-gen process"
        ).mkString(" ")
      )

    val smithy4sAllDependenciesAsJars =
      taskKey[Seq[File]](
        List(
          "List of all jars for internal and external dependencies that should be used as sources of Smithy specs.",
          "Namespaces that were used for code generation in these upstream dependencies will be excluded from code generation in this project."
        ).mkString(" ")
      )

    val Smithy4s =
      config("smithy4s").describedAs(
        "Dependencies containing Smithy code, used at codegen-time only."
      )

    val smithy4sModelTransformers =
      settingKey[List[String]](
        "List of transformer names that should be applied to the model prior to codegen"
      )
  }

  import autoImport._

  override lazy val buildSettings = Seq(
    smithy4sVersion := BuildInfo.version
  )

  override def projectConfigurations: Seq[Configuration] = Seq(Smithy4s)

  // Use this with any configuration to enable the codegen in it.
  def defaultSettings(config: Configuration) = Seq(
    config / smithy4sInputDirs := Seq(
      (config / sourceDirectory).value / "smithy"
    ),
    config / smithy4sOutputDir := (config / sourceManaged).value,
    config / smithy4sResourceDir := (config / resourceManaged).value,
    config / smithy4sCodegen := cachedSmithyCodegen(config).value,
    config / smithy4sSmithyLibrary := true,
    config / smithy4sInternalDependenciesAsJars := {
      (config / internalDependencyAsJars).value.map(_.data)
    },
    config / smithy4sExplicitCodegenOnlyDependencies := {
      transitiveLibraryDependencies.value
        .filter(
          _.configurations.exists(_.contains(Smithy4s.name))
        )
        .map(_.withConfigurations(None))
    },
    config / smithy4sExternallyTrackedDependencies := {
      (config / externalDependencyClasspath).value
        .map(_.data)
        .flatMap(extract)
    },
    config / smithy4sNormalExternalDependencies := {
      (config / externalDependencyClasspath).value
        .flatMap(_.metadata.get(moduleID.key))
    },
    config / smithy4sAllExternalDependencies := {
      (config / smithy4sNormalExternalDependencies).value ++
        (config / smithy4sExplicitCodegenOnlyDependencies).value ++
        (config / smithy4sExternallyTrackedDependencies).value
    },
    config / smithy4sAllDependenciesAsJars := {
      (config / smithy4sInternalDependenciesAsJars).value ++
        fetch(config / smithy4sAllExternalDependencies).value
    },
    config / sourceGenerators += (config / smithy4sCodegen).map(
      _.filter(_.ext == "scala")
    ),
    config / resourceGenerators += (config / smithy4sCodegen).map(
      _.filter(_.ext != "scala")
    ),
    config / cleanFiles += (config / smithy4sOutputDir).value,
    config / cleanFiles += (config / smithy4sResourceDir).value,
    config / smithy4sModelTransformers := List.empty,
    config / packageBin / packageOptions += {
      // This piece of logic aims at tracking the dependencies that Smithy4s used to generate
      // code at build time, in the manifest of the jar. This helps automatically pulling
      // the corresponding jars and prevents the users from having to search
      import java.util.jar.Manifest
      val manifest = new Manifest
      val scalaBin = scalaBinaryVersion.?.value
      val deps = libraryDependencies.value
        .filter(_.configurations.exists(_.contains(Smithy4s.name)))
        .flatMap(moduleIdEncode(_, scalaBin))
        .mkString(",")

      manifest
        .getMainAttributes()
        .put(new java.util.jar.Attributes.Name(SMITHY4S_DEPENDENCIES), deps)
      Package.JarManifest(manifest)
    }
  )

  override lazy val projectSettings =
    defaultSettings(Compile) ++ Seq(
      libraryDependencies ++= Seq(
        BuildInfo.alloyOrg % "alloy-core" % BuildInfo.alloyVersion % Smithy4s
      )
    )

  private def moduleIdEncode(
      moduleId: ModuleID,
      scalaBinaryVersion: Option[String]
  ): List[String] = {
    (moduleId.crossVersion, scalaBinaryVersion) match {
      case (Disabled, _) =>
        List(s"${moduleId.organization}:${moduleId.name}:${moduleId.revision}")
      case (_: Binary, Some(sbv)) =>
        List(
          s"${moduleId.organization}:${moduleId.name}_${sbv}:${moduleId.revision}"
        )
      case (_, _) => Nil
    }
  }

  /**
   * Retrieves the smithy4sDependencies that compile-dependencies may have listed
   * in their jar manifests when they were packaged.
   */
  private def fetch(
      dependenciesTask: Def.Initialize[Task[Seq[ModuleID]]]
  ): Def.Initialize[Task[Seq[File]]] =
    Def.task {

      def getJars(ids: Seq[ModuleID]): Seq[File] = {
        val syntheticModule =
          organization.value % (name.value + "-smithy4s-resolution") % version.value
        val depRes = (update / dependencyResolution).value
        val updc = (update / updateConfiguration).value
        val uwconfig = (update / unresolvedWarningConfiguration).value
        val modDescr = depRes.moduleDescriptor(
          syntheticModule,
          ids.toVector,
          None
        )

        depRes
          .update(
            modDescr,
            updc,
            uwconfig,
            streams.value.log
          )
          .map(_.allFiles)
          .fold(uw => throw uw.resolveException, identity)
      }
      getJars(dependenciesTask.value)
    }

  def transitiveLibraryDependencies: Def.Initialize[Task[Seq[ModuleID]]] = {
    val make = new ScopeFilter.Make {}
    import make.{inDependencies => inDeps, _}
    val selectDeps = ScopeFilter(inDeps(ThisProject, includeRoot = true))
    val allDeps = libraryDependencies.?.all(selectDeps)
    Def
      .taskDyn(
        allDeps.map(_.flatMap(_.getOrElse(Seq.empty)))
      )
  }

  private lazy val simple = raw"([^:]*):([^:]*):([^:]*)".r
  private lazy val cross = raw"([^:]*)::([^:]*):([^:]*)".r
  private def extract(jarFile: java.io.File): Seq[ModuleID] = {
    JarUtils
      .extractSmithy4sDependencies(jarFile)
      .collect {
        case cross(org, art, version)  => org %% art % version
        case simple(org, art, version) => org % art % version
      }
  }

  def cachedSmithyCodegen(conf: Configuration) = Def.task {
    val inputFiles =
      Option((conf / smithy4sInputDirs).value).toSeq.flatten
        .filter(_.exists())
        .toList
    val outputPath = (conf / smithy4sOutputDir).value
    val resourceOutputPath = (conf / smithy4sResourceDir).value
    val allowedNamespaces =
      (conf / smithy4sAllowedNamespaces).?.value.map(_.toSet)
    val excludedNamespaces =
      (conf / smithy4sExcludedNamespaces).?.value.map(_.toSet)
    val localJars =
      (conf / smithy4sAllDependenciesAsJars).value.map(os.Path(_)).toList
    val res =
      (conf / resolvers).value.toList.collect { case m: MavenRepository =>
        m.root
      }
    val transforms = (conf / smithy4sModelTransformers).value
    val s = (conf / streams).value
    val skipResources: Set[FileType] =
      if ((conf / smithy4sSmithyLibrary).value) Set.empty
      else Set(FileType.Resource)
    val skipSet = skipResources

    val filePaths = inputFiles.map(_.getAbsolutePath())
    val codegenArgs = CodegenArgs(
      filePaths.map(os.Path(_)).toList,
      output = os.Path(outputPath),
      resourceOutput = os.Path(resourceOutputPath),
      skip = skipSet,
      discoverModels = false,
      allowedNS = allowedNamespaces,
      excludedNS = excludedNamespaces,
      repositories = res,
      dependencies = List.empty,
      transformers = transforms,
      localJars = localJars
    )

    val cached =
      Tracked.inputChanged[CodegenArgs, Seq[File]](
        s.cacheStoreFactory.make("input")
      ) {
        Function.untupled {
          Tracked.lastOutput[(Boolean, CodegenArgs), Seq[File]](
            s.cacheStoreFactory.make("output")
          ) { case ((inputChanged, args), outputs) =>
            if (inputChanged || outputs.isEmpty) {
              val resPaths = smithy4s.codegen.Codegen
                .processSpecs(args)
                .toList
              resPaths.map(path => new File(path.toString))
            } else {
              outputs.getOrElse(Seq.empty)
            }
          }
        }
      }

    cached(codegenArgs)
  }
}
