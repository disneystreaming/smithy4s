"use strict";(self.webpackChunksmithy4s=self.webpackChunksmithy4s||[]).push([[3533],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var i=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=i.createContext({}),m=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),c=m(n),d=l,h=c["".concat(s,".").concat(d)]||c[d]||u[d]||r;return n?i.createElement(h,o(o({ref:t},p),{},{components:n})):i.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=d;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[c]="string"==typeof e?e:l,o[1]=a;for(var m=2;m<r;m++)o[m]=n[m];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3341:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>m});var i=n(7462),l=(n(7294),n(3905));const r={sidebar_label:"Quick Start",title:"Quick Start"},o=void 0,a={unversionedId:"overview/quickstart",id:"overview/quickstart",title:"Quick Start",description:"Below is a quick example of smithy4s in action. This page does not provide much explanation or detail. For more information on various aspects of smithy4s, read through the other sections of this documentation site.",source:"@site/../docs/target/jvm-2.13/mdoc/01-overview/02-quickstart.md",sourceDirName:"01-overview",slug:"/overview/quickstart",permalink:"/smithy4s/docs/overview/quickstart",draft:!1,editUrl:"https://github.com/disneystreaming/smithy4s/edit/main/modules/docs/src/01-overview/02-quickstart.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Quick Start",title:"Quick Start"},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/smithy4s/docs/overview/intro"},next:{title:"Installation",permalink:"/smithy4s/docs/overview/installation"}},s={},m=[{value:"For sbt",id:"for-sbt",level:2},{value:"project/plugins.sbt",id:"projectpluginssbt",level:3},{value:"build.sbt",id:"buildsbt",level:3},{value:"For Mill",id:"for-mill",level:2},{value:"Smithy content",id:"smithy-content",level:2},{value:"Using the generated code",id:"using-the-generated-code",level:2},{value:"Run Service",id:"run-service",level:2},{value:"Navigate to localhost:9000/docs",id:"navigate-to-localhost9000docs",level:2},{value:"Client Example",id:"client-example",level:2}],p={toc:m},c="wrapper";function u(e){let{components:t,...n}=e;return(0,l.kt)(c,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Below is a quick example of smithy4s in action. This page does not provide much explanation or detail. For more information on various aspects of smithy4s, read through the other sections of this documentation site."),(0,l.kt)("h2",{id:"for-sbt"},"For sbt"),(0,l.kt)("p",null,"This section will get you started with a simple ",(0,l.kt)("inlineCode",{parentName:"p"},"sbt")," module that enables smithy4s code generation. For a similar setup for mill, see ",(0,l.kt)("a",{parentName:"p",href:"#for-mill"},"Mill")," below."),(0,l.kt)("h3",{id:"projectpluginssbt"},"project/plugins.sbt"),(0,l.kt)("p",null,"Add the ",(0,l.kt)("inlineCode",{parentName:"p"},"smithy4s-sbt-codegen")," plugin to your build."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'addSbtPlugin("com.disneystreaming.smithy4s" % "smithy4s-sbt-codegen" % "0.18.14")\n')),(0,l.kt)("h3",{id:"buildsbt"},"build.sbt"),(0,l.kt)("p",null,"Enable the plugin in your project, add the smithy and http4s dependencies."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import smithy4s.codegen.Smithy4sCodegenPlugin\n\nThisBuild / scalaVersion := "2.13.12"\n\nval example = project\n  .in(file("modules/example"))\n  .enablePlugins(Smithy4sCodegenPlugin)\n  .settings(\n    libraryDependencies ++= Seq(\n      "com.disneystreaming.smithy4s" %% "smithy4s-http4s" % smithy4sVersion.value,\n      "com.disneystreaming.smithy4s" %% "smithy4s-http4s-swagger" % smithy4sVersion.value,\n      "org.http4s" %% "http4s-ember-server" % "0.23.26"\n    )\n  )\n')),(0,l.kt)("h2",{id:"for-mill"},"For Mill"),(0,l.kt)("p",null,"This section will get you started with a ",(0,l.kt)("inlineCode",{parentName:"p"},"mill")," module with code generation enabled on it."),(0,l.kt)("p",null,"In your ",(0,l.kt)("inlineCode",{parentName:"p"},"build.sc"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import $ivy.`com.disneystreaming.smithy4s::smithy4s-mill-codegen-plugin::0.18.14`\nimport smithy4s.codegen.mill._\n\nimport mill._, mill.scalalib._\nobject example extends ScalaModule with Smithy4sModule {\n  def scalaVersion = "2.13.8"\n  override def ivyDeps = Agg(\n    ivy"com.disneystreaming.smithy4s::smithy4s-core:${smithy4sVersion()}",\n    ivy"com.disneystreaming.smithy4s::smithy4s-http4s-swagger:${smithy4sVersion()}",\n    ivy"org.http4s::http4s-ember-server:0.23.26"\n  )\n}\n')),(0,l.kt)("h2",{id:"smithy-content"},"Smithy content"),(0,l.kt)("p",null,"Now is the time to add some Smithy shapes to see what code generation can do for you. Following the setup above, the location for the Smithy content will change depending on what build tool you used."),(0,l.kt)("p",null,"Now let's define an API in Smithy. Create the following file:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"for ",(0,l.kt)("inlineCode",{parentName:"li"},"sbt"),", you'll write in ",(0,l.kt)("inlineCode",{parentName:"li"},"modules/example/src/main/smithy/ExampleService.smithy"),"."),(0,l.kt)("li",{parentName:"ul"},"for ",(0,l.kt)("inlineCode",{parentName:"li"},"mill"),", you'll write in ",(0,l.kt)("inlineCode",{parentName:"li"},"example/smithy/ExampleService.smithy"))),(0,l.kt)("p",null,"And add the content below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'namespace smithy4s.hello\n\nuse alloy#simpleRestJson\n\n@simpleRestJson\nservice HelloWorldService {\n  version: "1.0.0",\n  operations: [Hello]\n}\n\n@http(method: "POST", uri: "/{name}", code: 200)\noperation Hello {\n  input: Person,\n  output: Greeting\n}\n\nstructure Person {\n  @httpLabel\n  @required\n  name: String,\n\n  @httpQuery("town")\n  town: String\n}\n\nstructure Greeting {\n  @required\n  message: String\n}\n')),(0,l.kt)("p",null,"The Scala code corresponding to this smithy file will be generated the next time you compile your project."),(0,l.kt)("h2",{id:"using-the-generated-code"},"Using the generated code"),(0,l.kt)("p",null,"Now, let's use the generated code by the service. You need to create a scala file at the following location:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"for sbt ",(0,l.kt)("inlineCode",{parentName:"li"},"modules/example/src/main/scala/Main.scala")),(0,l.kt)("li",{parentName:"ul"},"for mill ",(0,l.kt)("inlineCode",{parentName:"li"},"example/src/Main.scala"))),(0,l.kt)("p",null,"Implement your service by extending the generated Service trait. Wire up routes into server."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import smithy4s.example.hello._\nimport cats.effect._\nimport cats.implicits._\nimport org.http4s.implicits._\nimport org.http4s.ember.server._\nimport org.http4s._\nimport com.comcast.ip4s._\nimport smithy4s.http4s.SimpleRestJsonBuilder\n\nobject HelloWorldImpl extends HelloWorldService[IO] {\n  def hello(name: String, town: Option[String]): IO[Greeting] = IO.pure {\n    town match {\n      case None => Greeting(s"Hello $name!")\n      case Some(t) => Greeting(s"Hello $name from $t!")\n    }\n  }\n}\n\nobject Routes {\n  private val example: Resource[IO, HttpRoutes[IO]] =\n    SimpleRestJsonBuilder.routes(HelloWorldImpl).resource\n\n  private val docs: HttpRoutes[IO] =\n    smithy4s.http4s.swagger.docs[IO](HelloWorldService)\n\n  val all: Resource[IO, HttpRoutes[IO]] = example.map(_ <+> docs)\n}\n\nobject Main extends IOApp.Simple {\n\n  val run = Routes.all\n    .flatMap { routes =>\n      EmberServerBuilder\n        .default[IO]\n        .withPort(port"9000")\n        .withHost(host"localhost")\n        .withHttpApp(routes.orNotFound)\n        .build\n    }\n    .use(_ => IO.never)\n\n}\n')),(0,l.kt)("h2",{id:"run-service"},"Run Service"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"for sbt: ",(0,l.kt)("inlineCode",{parentName:"li"},'sbt "example/run"')),(0,l.kt)("li",{parentName:"ul"},"for mill: ",(0,l.kt)("inlineCode",{parentName:"li"},"mill example.run"))),(0,l.kt)("h2",{id:"navigate-to-localhost9000docs"},"Navigate to localhost:9000/docs"),(0,l.kt)("p",null,"Here you will find the automatically generated SwaggerUI which will allow you to easily test your API."),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://i.imgur.com/WQgetF6.png",alt:"SwaggerUI documentation site request"})),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://i.imgur.com/JRUQyny.png",alt:"SwaggerUI documentation site response"})),(0,l.kt)("h2",{id:"client-example"},"Client Example"),(0,l.kt)("p",null,"You can also generate a client using smithy4s."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import org.http4s.ember.client.EmberClientBuilder\n\nobject ClientImpl extends IOApp.Simple {\n\n  val helloWorldClient: Resource[IO, HelloWorldService[IO]] = for {\n    client <- EmberClientBuilder.default[IO].build\n    helloClient <- SimpleRestJsonBuilder(HelloWorldService)\n    .client(client)\n    .uri(Uri.unsafeFromString("http://localhost:9000"))\n    .resource\n  } yield helloClient\n\n  val run = helloWorldClient.use(c =>\n    c.hello("Sam", Some("New York City"))\n      .flatMap(greeting => IO.println(greeting.message))\n  )\n\n}\n')))}u.isMDXComponent=!0}}]);