"use strict";(self.webpackChunksmithy4s=self.webpackChunksmithy4s||[]).push([[3812],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1962:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_label:"Open Enums",title:"Open Enumerations"},o=void 0,s={unversionedId:"codegen/customisation/open-enums",id:"codegen/customisation/open-enums",title:"Open Enumerations",description:"By default, enum and intEnum shapes are considered to be closed and they are rendered as such. This means that it is expected that all possible values that can be in the enum are declared in the Smithy specification. However, there are certain times where you may require an open enumeration, meaning that values can be placed into it which are not declared in the Smithy specification. This can be useful for interoperability with APIs that you don't control, although often times a simple String or Integer shape will better suit a field where the values are not known beforehand.",source:"@site/../docs/target/jvm-2.13/mdoc/04-codegen/01-customisation/12-open-enums.md",sourceDirName:"04-codegen/01-customisation",slug:"/codegen/customisation/open-enums",permalink:"/smithy4s/docs/codegen/customisation/open-enums",draft:!1,editUrl:"https://github.com/disneystreaming/smithy4s/edit/main/modules/docs/src/04-codegen/01-customisation/12-open-enums.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_label:"Open Enums",title:"Open Enumerations"},sidebar:"tutorialSidebar",previous:{title:"Optics",permalink:"/smithy4s/docs/codegen/customisation/optics"},next:{title:"Nullable Values",permalink:"/smithy4s/docs/codegen/customisation/nullable-values"}},l={},c=[],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"intEnum")," shapes are considered to be closed and they are rendered as such. This means that it is expected that all possible values that can be in the enum are declared in the Smithy specification. However, there are certain times where you may require an open enumeration, meaning that values can be placed into it which are not declared in the Smithy specification. This can be useful for interoperability with APIs that you don't control, although often times a simple ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Integer")," shape will better suit a field where the values are not known beforehand."),(0,r.kt)("p",null,"Open enumerations can be specified using the ",(0,r.kt)("inlineCode",{parentName:"p"},"alloy#openEnum")," trait (",(0,r.kt)("a",{parentName:"p",href:"https://github.com/disneystreaming/alloy#alloyopenenum"},"docs here"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"use alloy#openEnum\n\n@openEnum\nenum Shape {\n  SQUARE, CIRCLE\n}\n\n@openEnum\nintEnum IntShape {\n  SQUARE = 1\n  CIRCLE = 2\n}\n")),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"alloy#openEnum")," trait is present, it makes it so the enumeration is rendered in the generated code with an extra case, ",(0,r.kt)("inlineCode",{parentName:"p"},"$Unknown"),". For Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"case object SQUARE extends Shape\ncase object CIRCLE extends Shape\nfinal case class $Unknown(value: String) extends Shape\n")),(0,r.kt)("p",null,"Note that the leading ",(0,r.kt)("inlineCode",{parentName:"p"},"$")," is added onto the ",(0,r.kt)("inlineCode",{parentName:"p"},"Unknown")," case to prevent potential collisions with actual enum values."))}m.isMDXComponent=!0}}]);