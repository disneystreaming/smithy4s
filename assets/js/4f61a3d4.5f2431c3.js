"use strict";(self.webpackChunksmithy4s=self.webpackChunksmithy4s||[]).push([[1868],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var s=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,s,i=function(e,t){if(null==e)return{};var n,s,i={},o=Object.keys(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=s.createContext({}),p=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return s.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=p(n),d=i,y=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?s.createElement(y,a(a({ref:t},c),{},{components:n})):s.createElement(y,a({ref:t},c))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[u]="string"==typeof e?e:i,a[1]=r;for(var p=2;p<o;p++)a[p]=n[p];return s.createElement.apply(null,a)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4339:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var s=n(7462),i=(n(7294),n(3905));const o={sidebar_label:"Optics",title:"Optics - Lenses and Prisms"},a=void 0,r={unversionedId:"codegen/customisation/optics",id:"codegen/customisation/optics",title:"Optics - Lenses and Prisms",description:"Smithy4s has the ability to render optics (Lens/Prism) instances in the code it generates.",source:"@site/../docs/target/jvm-2.13/mdoc/04-codegen/01-customisation/11-optics.md",sourceDirName:"04-codegen/01-customisation",slug:"/codegen/customisation/optics",permalink:"/smithy4s/docs/codegen/customisation/optics",draft:!1,editUrl:"https://github.com/disneystreaming/smithy4s/edit/main/modules/docs/src/04-codegen/01-customisation/11-optics.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_label:"Optics",title:"Optics - Lenses and Prisms"},sidebar:"tutorialSidebar",previous:{title:"Service Product",permalink:"/smithy4s/docs/codegen/customisation/service-product"},next:{title:"Open Enums",permalink:"/smithy4s/docs/codegen/customisation/open-enums"}},l={},p=[{value:"Optics Usage",id:"optics-usage",level:2},{value:"Using 3rd Party Optics Libraries",id:"using-3rd-party-optics-libraries",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,s.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Smithy4s has the ability to render optics (Lens/Prism) instances in the code it generates."),(0,i.kt)("p",null,"If you're using Smithy4s via ",(0,i.kt)("inlineCode",{parentName:"p"},"mill")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"sbt"),", then you can enable this functionality with the following keys:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"in mill, task: ",(0,i.kt)("inlineCode",{parentName:"li"},"def smithy4sRenderOptics = true")),(0,i.kt)("li",{parentName:"ul"},"in sbt, setting: ",(0,i.kt)("inlineCode",{parentName:"li"},"smithy4sRenderOptics := true"))),(0,i.kt)("p",null,"If you are using Smithy4s via the CLI, then they way to utilize this feature is through your Smithy specifications. The simplest approach is to add a file with the following content to your CLI invocation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'$version: "2"\n\nmetadata smithy4sRenderOptics = true\n')),(0,i.kt)("p",null,"Alternatively, if you want to generate optics for only select shapes in your model, you can accomplish this using\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"smithy4s.meta#generateOptics")," trait. This trait can be used on enum, intEnum, union, and structure shapes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"use smithy4s.meta#generateOptics\n\n@generateOptics\nstructure MyStruct {\n  one: String\n}\n")),(0,i.kt)("h2",{id:"optics-usage"},"Optics Usage"),(0,i.kt)("p",null,"Below is an example of using the lenses that smithy4s generates. By default, smithy4s will generate lenses for all structure shapes in your input smithy model(s)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import smithy4s.example._\n\nval input = TestInput("test", TestBody(Some("test body")))\n// input: TestInput = TestInput(\n//   pathParam = "test",\n//   body = TestBody(data = Some(value = "test body")),\n//   queryParam = None\n// )\nval lens = TestInput.optics.body.andThen(TestBody.optics.data).some\n// lens: smithy4s.optics.Optional[TestInput, String] = smithy4s.optics.Optional$$anon$1@367bf5b7\nval resultGet = lens.project(input)\n// resultGet: Option[String] = Some(value = "test body")\n\nresultGet == Option("test body") // true\n// res1: Boolean = true // true\n\nval resultSet =\n  lens.replace("new body")(input)\n// resultSet: TestInput = TestInput(\n//   pathParam = "test",\n//   body = TestBody(data = Some(value = "new body")),\n//   queryParam = None\n// )\n\nval updatedInput = TestInput("test", TestBody(Some("new body")))\n// updatedInput: TestInput = TestInput(\n//   pathParam = "test",\n//   body = TestBody(data = Some(value = "new body")),\n//   queryParam = None\n// )\n\nresultSet == updatedInput // true\n// res2: Boolean = true\n')),(0,i.kt)("p",null,"You can also compose prisms with lenses (and vice-versa) as in the example below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import smithy4s.example._\n\nval input = Podcast.Video(Some("Pod Title"))\n// input: Podcast.Video = Video(\n//   title = Some(value = "Pod Title"),\n//   url = None,\n//   durationMillis = None\n// )\n\nval prism = Podcast.optics.video.andThen(Podcast.Video.optics.title).some\n// prism: smithy4s.optics.Optional[Podcast, String] = smithy4s.optics.Optional$$anon$1@1676ac9f\nval result = prism.replace("New Pod Title")(input)\n// result: Podcast = Video(\n//   title = Some(value = "New Pod Title"),\n//   url = None,\n//   durationMillis = None\n// )\n\nPodcast.Video(Some("New Pod Title")) == result // true\n// res4: Boolean = true\n')),(0,i.kt)("p",null,"Smithy4s also provides a ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," function on Prisms and Lenses that can be used to abstract over NewTypes (similar to what ",(0,i.kt)("inlineCode",{parentName:"p"},".some")," does for Option types):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import smithy4s.example._\n\nval input = GetCityInput(CityId("test"))\n// input: GetCityInput = GetCityInput(cityId = "test")\n\nval cityName: smithy4s.optics.Lens[GetCityInput, String] = GetCityInput.optics.cityId.value\n// cityName: smithy4s.optics.Lens[GetCityInput, String] = smithy4s.optics.Lens$$anon$2@47ac2bc6\nval updated = cityName.replace("Fancy New Name")(input)\n// updated: GetCityInput = GetCityInput(cityId = "Fancy New Name")\n\nval result = cityName.project(updated)\n// result: Option[String] = Some(value = "Fancy New Name")\n\nOption("Fancy New Name") == result // true\n// res6: Boolean = true\n')),(0,i.kt)("h2",{id:"using-3rd-party-optics-libraries"},"Using 3rd Party Optics Libraries"),(0,i.kt)("p",null,"If you'd like to use a third party optics library for more functionality, you can accomplish this by adding an object with a few conversion functions. Here is an example using ",(0,i.kt)("a",{parentName:"p",href:"https://www.optics.dev/Monocle/"},"Monocle"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"object MonocleConversions {\n\n  implicit def smithy4sToMonocleLens[S, A](\n      smithy4sLens: smithy4s.optics.Lens[S, A]\n  ): monocle.Lens[S, A] =\n    monocle.Lens[S, A](smithy4sLens.get)(smithy4sLens.replace)\n\n  implicit def smithy4sToMonoclePrism[S, A](\n      smithy4sPrism: smithy4s.optics.Prism[S, A]\n  ): monocle.Prism[S, A] =\n    monocle.Prism(smithy4sPrism.project)(smithy4sPrism.inject)\n\n  implicit def smithy4sToMonocleOptional[S, A](\n      smithy4sOptional: smithy4s.optics.Optional[S, A]\n  ): monocle.Optional[S, A] =\n    monocle.Optional(smithy4sOptional.project)(smithy4sOptional.replace)\n\n}\n")),(0,i.kt)("p",null,"Then you can ",(0,i.kt)("inlineCode",{parentName:"p"},"import MonocleConversions._")," at the top of any file you need to seamlessly convert smithy4s optics over to Monocle ones."))}m.isMDXComponent=!0}}]);