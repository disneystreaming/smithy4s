"use strict";(self.webpackChunksmithy4s=self.webpackChunksmithy4s||[]).push([[9071],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),l=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=l(e.components);return i.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=l(n),u=a,g=c["".concat(p,".").concat(u)]||c[u]||d[u]||r;return n?i.createElement(g,o(o({ref:t},m),{},{components:n})):i.createElement(g,o({ref:t},m))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5484:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var i=n(7462),a=(n(7294),n(3905));const r={sidebar_label:"ScalaImports",title:"Add Scala imports to generated code"},o=void 0,s={unversionedId:"codegen/customisation/scala-imports",id:"codegen/customisation/scala-imports",title:"Add Scala imports to generated code",description:"scalaImports trait provides a mechanism for adding additional imports to smithy4s's generated code. This can be particularly useful when you want to combine type refinements (especially when the type refinements come a third party or in other module) and validators.",source:"@site/../docs/target/jvm-2.13/mdoc/04-codegen/01-customisation/15-scala-imports.md",sourceDirName:"04-codegen/01-customisation",slug:"/codegen/customisation/scala-imports",permalink:"/smithy4s/docs/codegen/customisation/scala-imports",draft:!1,editUrl:"https://github.com/disneystreaming/smithy4s/edit/main/modules/docs/src/04-codegen/01-customisation/15-scala-imports.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_label:"ScalaImports",title:"Add Scala imports to generated code"},sidebar:"tutorialSidebar",previous:{title:"Managing code size",permalink:"/smithy4s/docs/codegen/customisation/managing-code-size"},next:{title:"Unions and sealed traits",permalink:"/smithy4s/docs/codegen/unions"}},p={},l=[],m={toc:l},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"scalaImports")," trait provides a mechanism for adding additional imports to smithy4s's generated code. This can be particularly useful when you want to combine type refinements (especially when the type refinements come a third party or in other module) and validators."),(0,a.kt)("p",null,"Lets say We have a smithy specification and it's accommodated Scala code as below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'$version: "2.0"\nnamespace test\n\nuse smithy4s.meta#refinement\n\n@trait(selector: "integer")\n@refinement(\n    targetType: "myapp.types.PositiveInt"\n    providerImport: "myapp.types.providers._"\n)\nstructure PageSizeFormat { }\n\n@PageSizeFormat\ninteger PageSize\n\nstructure Input {\n  pageSize: PageSize\n}\n\n')),(0,a.kt)("p",null,"And"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'// package myapp.types\n// The recommendations from Type refinements docs are also applied here\nimport smithy4s._\n\ncase class PositiveInt(value: Int)\nobject PositiveInt {\n\n  private def isPositiveInt(value: Int): Boolean = value > 0\n\n  def apply(value: Int): Either[String, PositiveInt] =\n    if (isPositiveInt(value)) Right(new PositiveInt(value))\n    else Left(s"$value is not a positive int")\n}\n\nobject providers {\n\n  implicit val provider: RefinementProvider[PageSizeFormat, Int, PositiveInt] = Refinement.drivenBy[PageSizeFormat](\n    PositiveInt.apply,\n    (i: PositiveInt) => i.value\n  )\n}\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Note that the implicit ",(0,a.kt)("inlineCode",{parentName:"p"},"RefinementProvider")," is not in the companion object of ",(0,a.kt)("inlineCode",{parentName:"p"},"PositiveInt"),", so that We need to add an ",(0,a.kt)("inlineCode",{parentName:"p"},"providerImport")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"refinement")," trait.")),(0,a.kt)("p",null,"What We have here is ",(0,a.kt)("inlineCode",{parentName:"p"},"PageSize")," will be generated as a ",(0,a.kt)("inlineCode",{parentName:"p"},"PositiveInt"),". Which is really nice, but what if you need another validator like ",(0,a.kt)("inlineCode",{parentName:"p"},"@range")," to limit how big a ",(0,a.kt)("inlineCode",{parentName:"p"},"pageSize")," can be? So, just let try:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"structure Input {\n  // highlight-start\n  @range(max: 100)\n  // highlight-end\n  pageSize: PageSize\n}\n")),(0,a.kt)("p",null,"And compile to see what happen:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[error] 20 |    PageSize.schema.validated(smithy.api.Range(min = None, max = Some(scala.math.BigDecimal(100.0)))).field[Input]("pageSize", _.pageSize).addHints(smithy.api.Default(smithy4s.Document.fromDouble(0.0d))),\n[error]    |                                                                                                     ^\n[error]    |No implicit value of type smithy4s.RefinementProvider.Simple[smithy.api.Range, test.PageSize] was found for parameter constraint of method validated in trait Schema.\n[error]    |I found:\n[error]    |\n[error]    |    smithy4s.RefinementProvider.isomorphismConstraint[smithy.api.Range, A,\n[error]    |      test.PageSize.Type](smithy4s.RefinementProvider.enumRangeConstraint[A],\n[error]    |      /* missing */summon[smithy4s.Bijection[A, test.PageSize.Type]])\n[error]    |\n[error]    |But no implicit values were found that match type smithy4s.Bijection[A, test.PageSize.Type].\n[error] one error found\n')),(0,a.kt)("p",null,"This looks scary, but it basically says that We need to create an implicit value of ",(0,a.kt)("inlineCode",{parentName:"p"},"RefinementProvider.Simple[Range, PageSize.Type]")," and provide it to the file that contains ",(0,a.kt)("inlineCode",{parentName:"p"},"Input")," structure. We can do the first step by adding this to ",(0,a.kt)("inlineCode",{parentName:"p"},"providers")," object:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"   implicit val rangeProvider: RefinementProvider.Simple[smithy.api.Range, PositiveInt] =\n     RefinementProvider.rangeConstraint(x => x.value)\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Note that the ",(0,a.kt)("inlineCode",{parentName:"p"},"PageSize.Type")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"PositiveInt"))),(0,a.kt)("p",null,"And for the second step, We need to apply ",(0,a.kt)("inlineCode",{parentName:"p"},"scalaImports")," trait with an appropriate import to ",(0,a.kt)("inlineCode",{parentName:"p"},"Input")," structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'namespace test\n// highlight-start\nuse smithy4s.meta#scalaImports\n// highlight-end\nuse smithy4s.meta#refinement\n\n@trait(selector: "integer")\n@refinement(\n   targetType: "myapp.types.Natural"\n   providerImport: "myapp.types.providers._"\n)\nstructure PageSizeFormat {}\n\n@PageSizeFormat\ninteger PageSize\n\n// highlight-start\n@scalaImports(["myapp.types.providers._"])\n// highlight-end\nstructure Input {\n  @range(max: 100)\n  pageSize: PageSize\n}\n')),(0,a.kt)("p",null,"Now, Smithy4s will validate any ",(0,a.kt)("inlineCode",{parentName:"p"},"PageSize")," value against range and then refine it into ",(0,a.kt)("inlineCode",{parentName:"p"},"PositiveInt"),". We have the best of both worlds."))}d.isMDXComponent=!0}}]);