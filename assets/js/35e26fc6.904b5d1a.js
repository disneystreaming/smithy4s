"use strict";(self.webpackChunksmithy4s=self.webpackChunksmithy4s||[]).push([[3285],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(n),y=i,u=p["".concat(l,".").concat(y)]||p[y]||m[y]||r;return n?a.createElement(u,s(s({ref:t},d),{},{components:n})):a.createElement(u,s({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=y;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:i,s[1]=o;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},9541:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_label:"Validated Newtypes",title:"Validated Newtypes"},s=void 0,o={unversionedId:"codegen/customisation/validated-newtypes",id:"codegen/customisation/validated-newtypes",title:"Validated Newtypes",description:"As of version 0.19.x Smithy4s has the ability to render constrained newtypes over Smithy primitives as",source:"@site/../docs/target/jvm-2.13/mdoc/04-codegen/01-customisation/15-validated-newtypes.md",sourceDirName:"04-codegen/01-customisation",slug:"/codegen/customisation/validated-newtypes",permalink:"/smithy4s/docs/codegen/customisation/validated-newtypes",draft:!1,editUrl:"https://github.com/disneystreaming/smithy4s/edit/main/modules/docs/src/04-codegen/01-customisation/15-validated-newtypes.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_label:"Validated Newtypes",title:"Validated Newtypes"},sidebar:"tutorialSidebar",previous:{title:"ScalaImports",permalink:"/smithy4s/docs/codegen/customisation/scala-imports"},next:{title:"Unions and sealed traits",permalink:"/smithy4s/docs/codegen/unions"}},l={},c=[],d={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"As of version ",(0,i.kt)("inlineCode",{parentName:"p"},"0.19.x"),' Smithy4s has the ability to render constrained newtypes over Smithy primitives as\n"validated" classes in the code it generates. In practice this means that a newtype will now have an\n',(0,i.kt)("inlineCode",{parentName:"p"},"apply")," method that returns either a validated value or an error."),(0,i.kt)("p",null,"The way to utilize this feature is through your Smithy specifications by adding a file with the following\ncontent to your Smithy sources:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'$version: "2"\n\nmetadata smithy4sRenderValidatedNewtypes = true\n')),(0,i.kt)("p",null,"Alternatively, if you want to generate validated newtypes only for select shapes in your model, you can accomplish\nthis using the ",(0,i.kt)("inlineCode",{parentName:"p"},"smithy4s.meta#validateNewtype")," trait. This trait can only be used on number shapes with a range\nconstraint or string shapes with pattern and/or length constraints."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"use smithy4s.meta#validateNewtype\n\n@validateNewtype\n@length(min: 5)\nstring Name\n")),(0,i.kt)("p",null,"Below is the generated scala class that Smithy4s will generate:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import smithy4s._\nimport smithy4s.schema.Schema.string\n\ntype Name = Name.Type\n\nobject Name extends ValidatedNewtype[String] {\n  val id: ShapeId = ShapeId("smithy4s.example", "Name")\n\n  val hints: Hints = Hints.empty\n\n  val underlyingSchema: Schema[String] = \n    string\n      .withId(id)\n      .addHints(hints)\n      .validated(smithy.api.Length(min = Some(5L), max = None))\n\n  val validator: Validator[String, Name] = \n    Validator.of[String, Name](Bijection[String, Name](_.asInstanceOf[Name], value(_)))\n      .validating(smithy.api.Length(min = Some(5L), max = None))\n\n  implicit val schema: Schema[Name] = validator.toSchema(underlyingSchema)\n\n  @inline def apply(a: String): Either[String, Name] = validator.validate(a)\n}\n')))}m.isMDXComponent=!0}}]);