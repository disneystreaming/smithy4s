"use strict";(self.webpackChunksmithy4s=self.webpackChunksmithy4s||[]).push([[7054],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>v});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(t),m=i,v=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(v,o(o({ref:n},s),{},{components:t})):r.createElement(v,o({ref:n},s))}));function v(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[u]="string"==typeof e?e:i,o[1]=p;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},698:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>p,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const a={sidebar_label:"Service Product",title:"Service Product"},o=void 0,p={unversionedId:"codegen/customisation/service-product",id:"codegen/customisation/service-product",title:"Service Product",description:"As of smithy4s version 0.18.x you can also generate a service interface in",source:"@site/../docs/target/jvm-2.13/mdoc/04-codegen/01-customisation/10-service-product.md",sourceDirName:"04-codegen/01-customisation",slug:"/codegen/customisation/service-product",permalink:"/smithy4s/docs/codegen/customisation/service-product",draft:!1,editUrl:"https://github.com/disneystreaming/smithy4s/edit/main/modules/docs/src/04-codegen/01-customisation/10-service-product.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_label:"Service Product",title:"Service Product"},sidebar:"tutorialSidebar",previous:{title:"Typeclass Instances",permalink:"/smithy4s/docs/codegen/customisation/typeclass"},next:{title:"Optics",permalink:"/smithy4s/docs/codegen/customisation/optics"}},l={},c=[{value:"Static description of services",id:"static-description-of-services",level:3},{value:"Non-linear input of operation",id:"non-linear-input-of-operation",level:3},{value:"Fluent service builder",id:"fluent-service-builder",level:3}],s={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"As of smithy4s version ",(0,i.kt)("inlineCode",{parentName:"p"},"0.18.x"),' you can also generate a service interface in\nwhich each method doesn\'t receive an input. Instead, the output of each method\nhas the usual return type, which already includes the input as a type parameter.\nWe call this version a "service product" because it can be seen as the product\nof all the operations of the service.'),(0,i.kt)("p",null,"To generate a service product, annotate the service definition with"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@generateServiceProduct"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'$version: "2"\n\nnamespace smithy4s.example.product\n\nuse smithy4s.meta#generateServiceProduct\n\n@generateServiceProduct\nservice ExampleService {\n    operations: [ExampleOperation]\n}\n\noperation ExampleOperation {\n    input := {\n        @required\n        a: String\n    }\n    output := {\n        @required\n        b: String\n    }\n}\n')),(0,i.kt)("p",null,"This will generate the following interface:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"trait ExampleServiceProductGen[F[_, _, _, _, _]] {\n  def exampleOperation: F[ExampleOperationInput, Nothing, ExampleOperationOutput, Nothing, Nothing]\n}\n")),(0,i.kt)("p",null,"and the following implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"ServiceProduct"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"object ExampleServiceProductGen extends ServiceProduct[ExampleServiceProductGen]\n")),(0,i.kt)("p",null,"You will be able to access the service product version of the service like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import smithy4s.example.product._\n\nExampleServiceGen.serviceProduct\n// res0: smithy4s.ServiceProduct.Aux[ExampleServiceProductGen, ExampleServiceGen] = smithy4s.example.product.ExampleServiceProductGen$@46b9da7d\n")),(0,i.kt)("p",null,"Or, more generically:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import smithy4s.ServiceProduct\n\ndef productOf[Alg[_[_, _, _, _, _]]](mirror: ServiceProduct.Mirror[Alg]) = mirror.serviceProduct\n\n// example\ndef exampleProduct = productOf(ExampleService)\n")),(0,i.kt)("p",null,"With service products, you can call service methods without providing their inputs directly."),(0,i.kt)("p",null,"Here are a couple ways you can use this as a library author:"),(0,i.kt)("h3",{id:"static-description-of-services"},"Static description of services"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Implementation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import smithy4s.kinds.PolyFunction5\n\ntype Describe[_, _, _, _, _] = String\n\ndef descriptor[Alg[_[_, _, _, _, _]]](mirror: ServiceProduct.Mirror[Alg]): mirror.Prod[Describe] =\n  mirror\n    .serviceProduct\n    .mapK5(\n      mirror.serviceProduct.endpointsProduct,\n      new PolyFunction5[mirror.serviceProduct.service.Endpoint, Describe] {\n\n        override def apply[I, E, O, SI, SO](\n          fa: mirror.serviceProduct.service.Endpoint[I, E, O, SI, SO]\n        ): Describe[I, E, O, SI, SO] =\n          s"def ${fa.name}(input: ${fa.input.shapeId.name}): ${fa.output.shapeId.name}"\n\n      },\n    )\n'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'// Usage\n\nval desc: String = descriptor(ExampleService).exampleOperation\n// desc: String = "def ExampleOperation(input: ExampleOperationInput): ExampleOperationOutput"\n')),(0,i.kt)("h3",{id:"non-linear-input-of-operation"},"Non-linear input of operation"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Implementation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import smithy4s.ShapeId\n\ntype Id[A] = A\n\nval impl: ExampleService[Id] =\n  new ExampleService[Id] {\n\n    override def exampleOperation(input: String): ExampleOperationOutput = ExampleOperationOutput(\n      s"Output for $input!"\n    )\n\n  }\n// impl: ExampleService[Id] = repl.MdocSession$MdocApp$$anon$2@373cfc1\n\ntype ListClient[I, _, O, _, _] = List[I] => List[O]\n\ndef listClient[Alg[_[_, _, _, _, _]], Prod[_[_, _, _, _, _]]](\n  impl: smithy4s.kinds.FunctorAlgebra[Alg, Id]\n)(\n  implicit sp: ServiceProduct.Aux[Prod, Alg]\n): Prod[ListClient] = sp\n  .mapK5(\n    sp.endpointsProduct,\n    new PolyFunction5[sp.service.Endpoint, ListClient] {\n\n      private val interp = sp.service.toPolyFunction(impl)\n\n      override def apply[I, E, O, SI, SO](\n        fa: sp.service.Endpoint[I, E, O, SI, SO]\n      ): List[I] => List[O] = _.map(in => interp(fa.wrap(in)))\n\n    },\n  )\n'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'listClient(impl)( /* implicit scope problem here - TODO */ ExampleService.serviceProduct)\n  .exampleOperation(\n    List("a", "b", "c").map(ExampleOperationInput(_))\n  )\n// res1: List[ExampleOperationOutput] = List(\n//   ExampleOperationOutput(b = "Output for a!"),\n//   ExampleOperationOutput(b = "Output for b!"),\n//   ExampleOperationOutput(b = "Output for c!")\n// )\n')),(0,i.kt)("h3",{id:"fluent-service-builder"},"Fluent service builder"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Implementation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"type ToList[_, _, O, _, _] = List[O]\n\ntrait EndpointHandlerBuilder[I, E, O, SI, SO] {\n  def apply(f: I => O): EndpointHandler\n}\n\nsealed trait EndpointHandler {\n  type I_\n  type O_\n  def id: ShapeId\n  def function: I_ => O_\n}\n\ncase class PartialBuilder[Alg[_[_, _, _, _, _]], Prod[_[_, _, _, _, _]]](\n  mirror: ServiceProduct.Mirror.Aux[Alg, Prod],\n  handlers: List[EndpointHandler],\n) {\n  private val sp: ServiceProduct.Aux[Prod, Alg] = mirror.serviceProduct\n\n  private val ehbProduct = sp\n    .mapK5(\n      sp.endpointsProduct,\n      new PolyFunction5[sp.service.Endpoint, EndpointHandlerBuilder] {\n\n        override def apply[I, E, O, SI, SO](\n          fa: sp.service.Endpoint[I, E, O, SI, SO]\n        ): EndpointHandlerBuilder[I, E, O, SI, SO] =\n          new EndpointHandlerBuilder[I, E, O, SI, SO] {\n\n            override def apply(f: I => O): EndpointHandler =\n              new EndpointHandler {\n                type I_ = I\n                type O_ = O\n                override val id: ShapeId = fa.id\n                override val function: I_ => O_ = f\n              }\n\n          }\n\n      },\n    )\n\n  def build: Alg[ToList] = sp\n    .service\n    .algebra(new sp.service.EndpointCompiler[ToList] {\n\n      override def apply[I, E, O, SI, SO](\n        fa: sp.service.Endpoint[I, E, O, SI, SO]\n      ): I => List[O] = {\n\n        val matchingHandlers = handlers\n          .filter(_.id == fa.id)\n          // A bit of type unsafety, to simplify things\n          .map(_.function.asInstanceOf[I => O])\n\n        i => matchingHandlers.map(_.apply(i))\n\n      }\n\n    })\n\n  def withHandler(\n    op: Prod[EndpointHandlerBuilder] => EndpointHandler\n  ): PartialBuilder[Alg, Prod] = copy(handlers = handlers :+ op(ehbProduct))\n\n}\n\ndef partialBuilder[Alg[_[_, _, _, _, _]]](\n  mirror: ServiceProduct.Mirror[Alg]\n): PartialBuilder[Alg, mirror.Prod] = new PartialBuilder[Alg, mirror.Prod](mirror, handlers = Nil)\n"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val listService: ExampleServiceGen[ToList] =\n  partialBuilder(ExampleService)\n    .withHandler(_.exampleOperation { (in: ExampleOperationInput) =>\n      ExampleOperationOutput(s"First output for ${in.a}!")\n    })\n    .withHandler(_.exampleOperation { (in: ExampleOperationInput) =>\n      ExampleOperationOutput(s"Another output for ${in.a}!")\n    })\n    .build\n// listService: ExampleServiceGen[ToList] = smithy4s.example.product.ExampleServiceOperation$Transformed@5eef568a\n\nlistService.exampleOperation("hello")\n// res2: ToList[ExampleOperationInput, Nothing, ExampleOperationOutput, Nothing, Nothing] = List(\n//   ExampleOperationOutput(b = "First output for hello!"),\n//   ExampleOperationOutput(b = "Another output for hello!")\n// )\n')))}d.isMDXComponent=!0}}]);