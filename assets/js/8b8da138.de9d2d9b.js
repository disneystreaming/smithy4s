"use strict";(self.webpackChunksmithy4s=self.webpackChunksmithy4s||[]).push([[2167],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=u(n),m=l,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,i=new Array(o);i[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[c]="string"==typeof e?e:l,i[1]=r;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5635:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>u});var a=n(7462),l=(n(7294),n(3905));const o={sidebar_label:"Nullable Values",title:"Nullable Values"},i=void 0,r={unversionedId:"codegen/customisation/nullable-values",id:"codegen/customisation/nullable-values",title:"Nullable Values",description:"The official smithy toolset does not offer anything to distinguish between an absence of value and a value set to null during (de) serialisation.",source:"@site/../docs/target/jvm-2.13/mdoc/04-codegen/01-customisation/13-nullable-values.md",sourceDirName:"04-codegen/01-customisation",slug:"/codegen/customisation/nullable-values",permalink:"/smithy4s/docs/codegen/customisation/nullable-values",draft:!1,editUrl:"https://github.com/disneystreaming/smithy4s/edit/main/modules/docs/src/04-codegen/01-customisation/13-nullable-values.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{sidebar_label:"Nullable Values",title:"Nullable Values"},sidebar:"tutorialSidebar",previous:{title:"Open Enums",permalink:"/smithy4s/docs/codegen/customisation/open-enums"},next:{title:"Unions and sealed traits",permalink:"/smithy4s/docs/codegen/unions"}},s={},u=[{value:"Combinations with other annotations",id:"combinations-with-other-annotations",level:2}],p={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,l.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The official smithy toolset does not offer anything to distinguish between an absence of value and a value set to null during (de) serialisation. "),(0,l.kt)("p",null,"In order to differentiate the two, for example in order to allow a HTTP server to implement merge patch semantics or return explicit null rather than silently dropping a field, you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"alloy.nullable")," trait on members of a structure shape. For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-smithy"},"namespace example\n\nuse alloy#nullable\n\nstructure Foo {\n    @nullable\n    a: Integer\n}\n")),(0,l.kt)("p",null,"This will be rendered as"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'package example\n\nimport smithy4s._\nimport smithy4s.schema.Schema._\n\nfinal case class Foo(a: Option[Nullable[Int]] = None)\n\nobject Foo extends ShapeTag.Companion[Foo] {\n  val id: ShapeId = ShapeId("example", "FooIsh")\n\n  val hints: Hints = Hints.empty\n\n  implicit val schema: Schema[Foo] = struct(\n    int.nullable.optional[Foo]("a", _.a),\n  ){\n    Foo.apply\n  }.withId(id).addHints(hints)\n}\n')),(0,l.kt)("p",null,"The type ",(0,l.kt)("inlineCode",{parentName:"p"},"Nullable[A]")," is an ADT with two members: ",(0,l.kt)("inlineCode",{parentName:"p"},"Null")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Value(a)")," for some ",(0,l.kt)("inlineCode",{parentName:"p"},"a"),". This makes it exactly equivalent to ",(0,l.kt)("inlineCode",{parentName:"p"},"Option[A]"),", and methods ",(0,l.kt)("inlineCode",{parentName:"p"},"Nullable.fromOption(option)")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"nullable.toOption")," exist to allow for easy conversion between the two types. ",(0,l.kt)("inlineCode",{parentName:"p"},"Nullable")," is used rather than ",(0,l.kt)("inlineCode",{parentName:"p"},"Option")," for having clear semantics."),(0,l.kt)("p",null,"In this example, ",(0,l.kt)("inlineCode",{parentName:"p"},"Foo(Some(Nullable.Null))")," corresponds to an explicit value of ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," while ",(0,l.kt)("inlineCode",{parentName:"p"},"Foo(None)")," corresponds to absence of a value. This applies to both serialization and deserialization."),(0,l.kt)("h2",{id:"combinations-with-other-annotations"},"Combinations with other annotations"),(0,l.kt)("p",null,"The annotation ",(0,l.kt)("inlineCode",{parentName:"p"},"@nullable")," can be combined with both ",(0,l.kt)("inlineCode",{parentName:"p"},"@required")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"@default"),", with the following effects:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"annotating as ",(0,l.kt)("inlineCode",{parentName:"li"},"@required")," will forbid the field from being omitted but permit null to be passed explicitly on deserialization. It will always include the field but potentially set it to null on serialization."),(0,l.kt)("li",{parentName:"ul"},"annotating as ",(0,l.kt)("inlineCode",{parentName:"li"},"@default")," works the same as default values for non-nullable fields, with the exception that the default can be set to null and ",(0,l.kt)("a",{parentName:"li",href:"/smithy4s/docs/codegen/default-values"},'not automatically adjusted into a "zero value"'))),(0,l.kt)("p",null,"In both cases, the resulting Scala type of the field will be ",(0,l.kt)("inlineCode",{parentName:"p"},"smithy.Nullable[T]"),"."))}d.isMDXComponent=!0}}]);