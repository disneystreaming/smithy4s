"use strict";(self.webpackChunksmithy4s=self.webpackChunksmithy4s||[]).push([[6849],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(n),u=a,h=c["".concat(s,".").concat(u)]||c[u]||d[u]||l;return n?i.createElement(h,r(r({ref:t},m),{},{components:n})):i.createElement(h,r({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:a,r[1]=o;for(var p=2;p<l;p++)r[p]=n[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4135:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var i=n(7462),a=(n(7294),n(3905));const l={sidebar_label:"Deriving CLIs",title:"Deriving CLIs"},r=void 0,o={unversionedId:"protocols/deriving-cli",id:"protocols/deriving-cli",title:"Deriving CLIs",description:"- The Smithy4s Decline module provides the capability to derive a Decline Cli for your service.",source:"@site/../docs/target/jvm-2.13/mdoc/03-protocols/06-deriving-cli.md",sourceDirName:"03-protocols",slug:"/protocols/deriving-cli",permalink:"/smithy4s/docs/protocols/deriving-cli",draft:!1,editUrl:"https://github.com/disneystreaming/smithy4s/edit/main/modules/docs/src/03-protocols/06-deriving-cli.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_label:"Deriving CLIs",title:"Deriving CLIs"},sidebar:"tutorialSidebar",previous:{title:"Compliance Tests",permalink:"/smithy4s/docs/protocols/compliance-tests"},next:{title:"Protobuf",permalink:"/smithy4s/docs/protocols/protobuf-grpc/protobuf"}},s={},p=[],m={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The Smithy4s Decline module provides the capability to derive a ",(0,a.kt)("a",{parentName:"li",href:"https://ben.kirw.in/decline/"},"Decline")," Cli for your service."),(0,a.kt)("li",{parentName:"ul"},"The cli generated will be in the form of a ",(0,a.kt)("a",{parentName:"li",href:"https://ben.kirw.in/decline/usage.html#commands-and-subcommands"},"Command[F[Unit]]")," where F is the effect type of your service."),(0,a.kt)("li",{parentName:"ul"},"This module is written in ",(0,a.kt)("a",{parentName:"li",href:"https://okmij.org/ftp/tagless-final/"},"Tagless Final")," style and requires an ",(0,a.kt)("inlineCode",{parentName:"li"},"F[_]")," for which there is an instance of ",(0,a.kt)("a",{parentName:"li",href:"https://typelevel.org/cats/api/cats/package$$MonadThrow$.html"},"cats.MonadThrow")),(0,a.kt)("li",{parentName:"ul"},"Let's revisit our HelloWorld smithy definition from the ",(0,a.kt)("a",{parentName:"li",href:"/smithy4s/docs/overview/quickstart"},"Quickstart"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'namespace smithy4s.hello\n\nuse alloy#simpleRestJson\n\n@simpleRestJson\nservice HelloWorldService {\n  version: "1.0.0",\n  operations: [Hello]\n}\n\n@http(method: "POST", uri: "/{name}", code: 200)\noperation Hello {\n  input: Person,\n  output: Greeting\n}\n\nstructure Person {\n  @httpLabel\n  @required\n  name: String,\n\n  @httpQuery("town")\n  town: String\n}\n\nstructure Greeting {\n  @required\n  message: String\n}\n')),(0,a.kt)("p",null,"Let's implement the HelloWorld service, we will use ",(0,a.kt)("inlineCode",{parentName:"p"},"cats.effect.IO")," for our effect type."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import smithy4s.example.hello._\nimport cats.effect.IO\n\nobject HelloWorldServiceInstance{\n  val simple = new HelloWorldService[IO]{\n    def hello(name: String, town: Option[String]): IO[Greeting] = {\n      IO {\n        Greeting(s"hello $name , who hails from $town")\n      }\n    }\n  }\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Now Using the ",(0,a.kt)("inlineCode",{parentName:"li"},"decline")," module from Smithy4s we can wrap the service instance in an instance of a ",(0,a.kt)("inlineCode",{parentName:"li"},"Smithy4sCli"),".",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"Smithy4sCli")," allows the customization of the Opts and stdin/stdout/stderr handling"))),(0,a.kt)("li",{parentName:"ul"},"There is a convenient helper method ",(0,a.kt)("inlineCode",{parentName:"li"},"Smithy4sCli.standalone")," to make it easier to construct Cli's using  defaults."),(0,a.kt)("li",{parentName:"ul"},"To utilize the helper method, wrap the service in an instance of ",(0,a.kt)("inlineCode",{parentName:"li"},"Opts")," and pass it into ",(0,a.kt)("inlineCode",{parentName:"li"},"Smithy4sCli.standalone")),(0,a.kt)("li",{parentName:"ul"},"there are 2 methods available on the ",(0,a.kt)("inlineCode",{parentName:"li"},"Smithy4sCli")," instance",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"opts")," which will provide an ",(0,a.kt)("inlineCode",{parentName:"li"},"Opts[F[Unit]]")," for the service"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"command")," which will provide a ",(0,a.kt)("inlineCode",{parentName:"li"},"Command[F[Unit]]")," for the service. This uses defaults from the Smithy spec",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"command name will use the service name"),(0,a.kt)("li",{parentName:"ul"},"if documentation comments are available on the service , they will be used as the command help text")))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"   import com.monovore.decline._\n   import smithy4s.decline.Smithy4sCli\n   val serviceWrappedInOpts = Opts(HelloWorldServiceInstance.simple)\n   val helloCommand: Command[IO[Unit]] = Smithy4sCli.standalone(serviceWrappedInOpts).command\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"helloCommand")," is now a runnable ",(0,a.kt)("inlineCode",{parentName:"li"},"Command")," that can parse command line args and returns an IO","[Unit]"),(0,a.kt)("li",{parentName:"ul"},"We can implement a CLI that will run the command and print the result to stdout")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"\nimport smithy4s.decline.Smithy4sCli\nimport cats.effect._\nimport com.monovore.decline._\nimport com.monovore.decline.effect.CommandIOApp\n\nobject app extends IOApp {\n  override def run(args: List[String]) = {\n    val helloCommand: Command[IO[ExitCode]] = Smithy4sCli\n      .standalone(Opts(HelloWorldServiceInstance.simple))\n      .command.map(_.redeem(_ => ExitCode.Error, _ => ExitCode.Success))\n    CommandIOApp.run(helloCommand, args)\n  }\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the command will  provide the following interface")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"}," Usage: hello-world-service hello [--output <output>] <name> [<town>]\n HTTP POST /{name}\n Options and flags:\n     --help\n         Display this help text.\n     --output <output>\n         Output mode\n")),(0,a.kt)("h1",{id:"smithy-to-decline-mappings"},"Smithy to Decline mappings"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The Service name will be used to generate the top level Command",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"All operations will be mapped to subcommands"))),(0,a.kt)("li",{parentName:"ul"},"The Input structure is flattened to top level fields with no nesting",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"All Primitives are mapped to a Positional ",(0,a.kt)("inlineCode",{parentName:"li"},"decline")," Argument , with the following exceptions.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Boolean fields are mapped to a ",(0,a.kt)("inlineCode",{parentName:"li"},"decline")," Flag"),(0,a.kt)("li",{parentName:"ul"},"Blobs are mapped to take in either stdin(by passing in ",(0,a.kt)("inlineCode",{parentName:"li"},"-")," ) or a full file path and will produce a Byte array"),(0,a.kt)("li",{parentName:"ul"},"Timestamps are parsed using TimestampFormat.DATE_TIME by default, but @timestampFormat can be used to customize that."))),(0,a.kt)("li",{parentName:"ul"},"Lists and recursive types",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"a top level list is converted to a repeated positional argument (or flag in case of Boolean)"),(0,a.kt)("li",{parentName:"ul"},"All recursive types expect json to be passed in."))),(0,a.kt)("li",{parentName:"ul"},"How is Nesting handled",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"all nested fields are converted to Options"),(0,a.kt)("li",{parentName:"ul"},"a nested list is converted to expect a json i.e. List","[String]"," would expect ",(0,a.kt)("inlineCode",{parentName:"li"},'\'["foo","baz","qux"]\'')," as a decline Option",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"when the nested list contains blobs , it will expect a json of base64 encoded strings"))))))),(0,a.kt)("li",{parentName:"ul"},"Help",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Documentation is added to every field, operation and service - if available. For HTTP operations a path template is provided as well.")))),(0,a.kt)("h1",{id:"missing-features"},"Missing Features"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Collision Handling for un-nesting of nested fields")))}d.isMDXComponent=!0}}]);