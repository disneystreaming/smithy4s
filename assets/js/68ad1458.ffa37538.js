"use strict";(self.webpackChunksmithy4s=self.webpackChunksmithy4s||[]).push([[5997],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),m=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=m(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=m(n),h=r,u=p["".concat(l,".").concat(h)]||p[h]||d[h]||a;return n?o.createElement(u,s(s({ref:t},c),{},{components:n})):o.createElement(u,s({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var m=2;m<a;m++)s[m]=n[m];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8348:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>m});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_label:"Serialisation overview",title:"Serialisation overview"},s=void 0,i={unversionedId:"02.1-serialisation/serialisation",id:"02.1-serialisation/serialisation",title:"Serialisation overview",description:"The code generated by Smithy4s is strictly protocol agnostic. One implication is that the data-types generated by Smithy4s are not tied to any particular serialisation format or third-party library. Instead, Smithy4s generates an instance of a smithy4s.schema.Schema for each data-type (see the relevant section). From this schema can be derived encoders and decoders for virtually any serialisation format.",source:"@site/../docs/target/jvm-2.13/mdoc/02.1-serialisation/01-serialisation.md",sourceDirName:"02.1-serialisation",slug:"/02.1-serialisation/serialisation",permalink:"/smithy4s/docs/02.1-serialisation/serialisation",draft:!1,editUrl:"https://github.com/disneystreaming/smithy4s/edit/main/modules/docs/src/02.1-serialisation/01-serialisation.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Serialisation overview",title:"Serialisation overview"},sidebar:"tutorialSidebar",previous:{title:"Learning resources",permalink:"/smithy4s/docs/learning-resources"}},l={},m=[{value:"Document (JSON-like adt)",id:"document-json-like-adt",level:3},{value:"JSON",id:"json",level:3},{value:"XML",id:"xml",level:3},{value:"Protobuf",id:"protobuf",level:3}],c={toc:m},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The code generated by Smithy4s is strictly ",(0,r.kt)("strong",{parentName:"p"},"protocol agnostic"),". One implication is that the data-types generated by Smithy4s are not tied to any particular serialisation format or third-party library. Instead, Smithy4s generates an instance of a ",(0,r.kt)("inlineCode",{parentName:"p"},"smithy4s.schema.Schema")," for each data-type (see ",(0,r.kt)("a",{parentName:"p",href:"/smithy4s/docs/design/schemas"},"the relevant section"),"). From this schema can be derived encoders and decoders for virtually any serialisation format."),(0,r.kt)("p",null,"Smithy4s provides opt-in modules implementing serialisation in a bunch of formats, including ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"XML")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Protobuf"),". The modules cross-compile to all combinations of platforms (JVM/JS/Native) and scala-versions supported by Smithy4s."),(0,r.kt)("h3",{id:"document-json-like-adt"},"Document (JSON-like adt)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"smithy4s-core")," module provides a ",(0,r.kt)("inlineCode",{parentName:"p"},"smithy4s.Document")," datatype that is used in code-generation when ",(0,r.kt)("a",{parentName:"p",href:"https://smithy.io/2.0/spec/simple-types.html#document"},"document")," shapes are used in smithy. ",(0,r.kt)("inlineCode",{parentName:"p"},"Document")," is effectively a JSON ADT, and can be easily converted to from other ADTs, such as the one provided by the ",(0,r.kt)("a",{parentName:"p",href:"https://circe.github.io/circe/"},"Circe library"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Document")," also comes with its own Encoder and Decoder construct, for which instances can be derived for every datatype generated by Smithy4s."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import smithy4s.example.hello.Person\nimport smithy4s.Document\n\nval personEncoder = Document.Encoder.fromSchema(Person.schema)\n// personEncoder: Document.Encoder[Person] = smithy4s.Document$CachedEncoderCompilerImpl$$anon$1@1ca89209\nval personDocument = personEncoder.encode(Person(name = "John Doe"))\n// personDocument: Document = DObject(\n//   value = Map("name" -> DString(value = "John Doe"))\n// )\n\nval personDecoder = Document.Decoder.fromSchema(Person.schema)\n// personDecoder: Document.Decoder[Person] = smithy4s.Document$Decoder$$anon$2@25a908c5\nval maybePerson = personDecoder.decode(personDocument)\n// maybePerson: Either[smithy4s.codecs.PayloadError, Person] = Right(\n//   value = Person(name = "John Doe", town = None)\n// )\n')),(0,r.kt)("p",null,"By default, smithy4s Documents abide by the same semantics as ",(0,r.kt)("inlineCode",{parentName:"p"},"smithy4s-json")," (see section below)."),(0,r.kt)("p",null,"It is worth noting that, although ",(0,r.kt)("inlineCode",{parentName:"p"},"Document")," is isomorphic to a JSON ADT, its ",(0,r.kt)("inlineCode",{parentName:"p"},".toString")," is not valid JSON. Likewise, the ",(0,r.kt)("inlineCode",{parentName:"p"},"smithy4s-core")," module does not contain logic to parse JSON strings into Documents. In order to read/write Documents from/to JSON strings, you need the ",(0,r.kt)("inlineCode",{parentName:"p"},"smithy4s-json")," module. The ",(0,r.kt)("inlineCode",{parentName:"p"},"smithy4s.json.Json")," entry-point contains methods that work with Documents."),(0,r.kt)("h3",{id:"json"},"JSON"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"smithy4s-json")," module provides ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/plokhotnyuk/jsoniter-scala"},"jsoniter-based")," encoders/decoders that can read/write generated data-types from/to JSON bytes/strings, without an intermediate JSON ADT. The performance of this module is ",(0,r.kt)("a",{parentName:"p",href:"https://plokhotnyuk.github.io/jsoniter-scala/"},"very competitive")," in the Scala ecosystem."),(0,r.kt)("p",null,"This module is provided at the following coordinates :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'sbt : "com.disneystreaming.smithy4s" %% "smithy4s-json" % "0.18.21"\nmill : "com.disneystreaming.smithy4s::smithy4s-json:0.18.21"\n')),(0,r.kt)("p",null,"The entrypoint for JSON parsing/writing is ",(0,r.kt)("inlineCode",{parentName:"p"},"smithy4s.json.Json"),". See below for example usage."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import smithy4s.example.hello.Person\n\nimport smithy4s.Blob\nimport smithy4s.json.Json\n\nval personEncoder = Json.payloadCodecs.encoders.fromSchema(Person.schema)\n// personEncoder: smithy4s.codecs.package.PayloadEncoder[Person] = smithy4s.json.internals.JsonPayloadCodecCompilerImpl$$anon$1$$anonfun$fromSchema$2@41eee5c\nval personJSON = personEncoder.encode(Person(name = "John Doe")).toUTF8String\n// personJSON: String = "{\\"name\\":\\"John Doe\\"}"\n\nval personDecoder = Json.payloadCodecs.decoders.fromSchema(Person.schema)\n// personDecoder: smithy4s.codecs.package.PayloadDecoder[Person] = smithy4s.json.internals.JsonPayloadCodecCompilerImpl$JsonPayloadDecoder@3654825e\nval maybePerson = personDecoder.decode(Blob(personJSON))\n// maybePerson: Either[smithy4s.codecs.PayloadError, Person] = Right(\n//   value = Person(name = "John Doe", town = None)\n// )\n')),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"smithy4s-json")," abides by the semantics of :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://smithy.io/2.0/spec/protocol-traits.html"},"official smithy traits"),", including:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://smithy.io/2.0/spec/protocol-traits.html#jsonname-trait"},"jsonName")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://smithy.io/2.0/spec/protocol-traits.html#timestampformat-trait"},"timestampFormat")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://smithy.io/2.0/spec/type-refinement-traits.html#sparse-trait"},"sparse")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://smithy.io/2.0/spec/type-refinement-traits.html#required-trait"},"required")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://smithy.io/2.0/spec/type-refinement-traits.html#default-value-serialization"},"default"),". It is worth noting that, by default, Smithy4s chooses to not serialise default values if the when the member is optional."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/disneystreaming/alloy/blob/main/docs/serialisation/json.md"},"alloy traits"))),(0,r.kt)("h3",{id:"xml"},"XML"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"smithy4s-xml")," module provides ",(0,r.kt)("a",{parentName:"p",href:"https://fs2-data.gnieh.org/documentation/xml/"},"fs2-data")," encoders/decoders that can read/write generated data-types from/to XML bytes/strings. It is provided at the following coordinates :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'sbt : "com.disneystreaming.smithy4s" %% "smithy4s-xml" % "0.18.21"\nmill : "com.disneystreaming.smithy4s::smithy4s-xml:0.18.21"\n')),(0,r.kt)("p",null,"The entrypoint for  ",(0,r.kt)("inlineCode",{parentName:"p"},"smithy4s.xml.Xml"),". See below for example usage."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import smithy4s.example.hello.Person\n\nimport smithy4s.Blob\nimport smithy4s.xml.Xml\n\nval personEncoder = Xml.encoders.fromSchema(Person.schema)\n// personEncoder: smithy4s.codecs.package.BlobEncoder[Person] = smithy4s.xml.internals.XmlPayloadEncoderCompilerImpl$$anonfun$fromSchema$2@39df8baa\nval personXML = personEncoder.encode(Person(name = "John Doe")).toUTF8String\n// personXML: String = "<Person><name>John Doe</name></Person>"\n\nval personDecoder = Xml.decoders.fromSchema(Person.schema)\n// personDecoder: smithy4s.codecs.package.BlobDecoder[Person] = smithy4s.xml.Xml$$anon$1$$anon$2@545d5374\nval maybePerson = personDecoder.decode(Blob(personXML))\n// maybePerson: Either[smithy4s.codecs.PayloadError, Person] = Right(\n//   value = Person(name = "John Doe", town = None)\n// )\n')),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"smithy4s-xml")," abides by the semantics of :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://smithy.io/2.0/spec/protocol-traits.html#xml-bindings"},"official XML-related smithy traits"))),(0,r.kt)("h3",{id:"protobuf"},"Protobuf"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"smithy4s-protobuf")," module provides ",(0,r.kt)("a",{parentName:"p",href:"https://protobuf.dev/"},"protocol-buffers")," codecs that can read/write generated data-types from protobuf-encoded bytes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'sbt : "com.disneystreaming.smithy4s" %% "smithy4s-protobuf" % "0.18.21"\nmill : "com.disneystreaming.smithy4s::smithy4s-protobuf:0.18.21"\n')),(0,r.kt)("p",null,"The entrypoint for Protobuf parsing/writing is ",(0,r.kt)("inlineCode",{parentName:"p"},"smithy4s.protobuf.Protobuf"),". See below for example usage."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import smithy4s.example.hello.Person\nimport smithy4s.protobuf.Protobuf\n\nval personCodec = Protobuf.codecs.fromSchema(Person.schema)\n// personCodec: smithy4s.protobuf.ProtobufCodec[Person] = smithy4s.protobuf.ProtobufCodec$$anon$1@27422bad\nval personBytes = personCodec.writeBlob(Person(name = "John Doe"))\n// personBytes: smithy4s.Blob = ArraySliceBlob(..., 0, 10)\nval maybePerson = personCodec.readBlob(personBytes)\n// maybePerson: Either[smithy4s.protobuf.ProtobufReadError, Person] = Right(\n//   value = Person(name = "John Doe", town = None)\n// )\n')),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"smithy4s-protobuf")," abides by the semantics of :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/disneystreaming/alloy/blob/main/docs/serialisation/protobuf.md"},"alloy protobuf traits"),". These semantics are the exact same semantics that ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/disneystreaming/smithy-translate"},"smithy-translate")," uses to translate smithy to protobuf. This implies that the Smithy4s protobuf codecs are compatible with the codecs of other protobuf tools, generated from the .proto files resulting from running smithy through smithy-translate. In short, Smithy4s and ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/scalapb/ScalaPB"},"ScalaPB")," can talk to each other : the ScalaPB codecs generated from protobuf after a translation from smithy are able to decode binary data produced by Smithy4s protobuf codecs (and vice versa).")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    \u2502                        \u2502                    \u2502\n\u2502                    \u2502                        \u2502                    \u2502\n\u2502                    \u2502                        \u2502                    \u2502\n\u2502                    \u2502                        \u2502                    \u2502\n\u2502     Smithy IDL     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba    Protobuf IDL    \u2502\n\u2502                    \u2502   smithy-translate     \u2502                    \u2502\n\u2502                    \u2502                        \u2502                    \u2502\n\u2502                    \u2502                        \u2502                    \u2502\n\u2502                    \u2502                        \u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502                                             \u2502\n          \u2502                                             \u2502\n          \u2502                                             \u2502\n          \u2502                                             \u2502\n          \u2502                                             \u2502\n          \u2502                                             \u2502\n          \u2502 Smithy4s codegen                            \u2502 ScalaPB codegen\n          \u2502                                             \u2502\n          \u2502                                             \u2502\n          \u2502                                             \u2502\n          \u2502                                             \u2502\n          \u2502                                             \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    \u2502                        \u2502                    \u2502\n\u2502                    \u2502                        \u2502                    \u2502\n\u2502                    \u2502                        \u2502                    \u2502\n\u2502                    \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                    \u2502\n\u2502    Smithy4s code   \u2502  Runtime communication \u2502     ScalaPB code   \u2502\n\u2502                    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba                    \u2502\n\u2502                    \u2502                        \u2502                    \u2502\n\u2502                    \u2502                        \u2502                    \u2502\n\u2502                    \u2502                        \u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")))}d.isMDXComponent=!0}}]);